# docker-compose.dev.yml
networks:
  tg_store_network:
    name: tg_store_network
    driver: bridge
  external_network:  # Эта сеть будет иметь доступ к внешнему интернету
    name: external_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - tg_store_network
    volumes:
      - redis_data:/data
    restart: always
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: botanic-backend
    ports:
      - "8000:8000"
    command: ["/docker-entrypoint.sh", "fastapi"]
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
    environment:
      - FASTAPI_ENV=development
      - SERVICE_TYPE=fastapi
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/backend
      - media_data:/backend/media
    env_file:
      - backend/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tg_store_network
    dns:
    - 8.8.8.8
    - 1.1.1.1
    restart: unless-stopped
    user: app

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: botanic-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/conf.d/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
      - media_data:/backend/media:ro
    depends_on:
      - backend
    networks:
      - tg_store_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/dev/Dockerfile
    container_name: botanic-frontend
    volumes:
      - ./frontend/app:/app
      - /app/node_modules  # Важно: это volume для node_modules
    env_file:
      - ./frontend/.env
    expose:
      - "5173"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=/api/v1
      - VITE_DEV_SERVER_URL=http://localhost:5173
      - VITE_HMR_HOST=localhost
      - VITE_HMR_PORT=5173
    networks:
      - tg_store_network
    command: npm run dev -- --host  # --host важен для доступа извне контейнера


  telegram_bot:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    command: ["/docker-entrypoint.sh", "telegram_bot"]
    container_name: botanic-bot
    environment:
      - FASTAPI_ENV=development
      - SERVICE_TYPE=telegram_bot
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0    
    volumes:
      - ./backend:/backend
    env_file:
      - backend/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tg_store_network
      - external_network  # Добавим новую сеть для внешнего доступа
    dns:  # Явно указываем DNS серверы
      - 8.8.8.8  # Google DNS
      - 8.8.4.4  # Альтернативный Google DNS  
    restart: unless-stopped
      
  postgres:
    image: postgres:16
    container_name: botanic-postgres
    ports:
      - "5433:5432"  # Изменен порт во избежание конфликтов
    env_file:
      - backend/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tg_store_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    name: tg_store_postgres_data
  redis_data:
    name: tg_store_redis_data
    driver: local
  nginx_logs:
    name: tg_store_nginx_logs
  media_data:
    name: tg_store_media_data
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/backend/media
      o: bind
      